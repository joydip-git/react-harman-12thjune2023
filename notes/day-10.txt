1. Routing:

localhost:3000 =>      		  		Home
localhost:3000/home => 		  		Home
localhost:3000/products =>    		ProductList [ProductTable(ProductRow) + FilterProduct]
localhost:3000/products/view/:id =>   ViewProduct {'id':'3'} <= params
localhost:3000/products/edit/:id =>   EditProduct
localhost:3000/products/add =>  	AddProduct

localhost:3000/<invalid-path> =>    PageNotFound

Route: path and component

Router: engine who can read URL (routes) from and write to the browser address bar as well as redirect you to that route
a. BrowserRouter
b. HashRouter
c. MemoryRouter

Next JS:
	app
		index.tsx (root file) => index.js	(Home)
		
		- products (folder)
			index.tsx (root file => ProductList) => products.js (ProductList)
			
			- add (folder)
				index.tsx (root file => AddProduct) => add.js (AddProduct)
			- edit
				- [route-parameter-name]
					index.tsx (root file => EditProduct) => id.js (EditProduct)
			- viewproduct
				- [route-parameter-name]
					index.tsx (root file => ViewProduct) => id.js (ViewProduct)
			
	
	
	
	display all products:
		component: ProductList [products>index.tsx=>products.js]
			client => products.js
			server => products.html + products.json
		component: ViewProduct [products/viewproduct/[id]/index.tsx => id.js]
			client: id.js 
			server: id.html + id.json

1. Client-side rendering:
2. Pre-Rendering:			
	a. Static Site Generation (SSG): this creates HTML file/JS chunks and JSON files (for data) before any request has come from any client
	
	b. Server side rendering: based on request, dynamically Next JS (Which is still running at server side) generates some html/js chunk/json files
	
Data Fetching:
	client-side data fetching
	pre-fetching


	
	
	
	
	
	
	
	
	
	
	
	




